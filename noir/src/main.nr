use dep::bignum::{BigNumTrait, fields::bls12_381Fr::BLS12_381_Fr};
use dep::noir_bigcurve::{
    BigCurveTrait,
    curves::bls12_381::{BLS12_381, BLS12_381_Params, BLS12_381Scalar},
    ScalarFieldTrait,
};
use std::hash::blake2s;

// Converts a little-endian byte array to big-endian
fn le_to_be(bytes: [u8; 32]) -> [u8; 32] {
    let mut result: [u8; 32] = [0; 32];
    for i in 0..32 {
        result[i] = bytes[31 - i];
    }
    result
}

// Combines two byte arrays into one
fn combine_bytes(a: [u8; 32], b: [u8; 32]) -> [u8; 64] {
    let mut result: [u8; 64] = [0; 64];
    for i in 0..32 {
        result[i] = a[i];
        result[i + 32] = b[i];
    }
    result
}

// Converts bytes to a scalar field element
fn bytes_to_scalar(bytes: [u8; 32]) -> BLS12_381Scalar {
    let fr = BLS12_381_Fr::from_be_bytes(bytes);
    BLS12_381Scalar::from_bignum(fr)
}

// Multiplies a scalar by a point
fn scalar_mul_point(scalar: BLS12_381Scalar, point: BLS12_381) -> BLS12_381 {
    point.mul(scalar)
}

fn derive_public_key(secret_key: BLS12_381Scalar) -> BLS12_381 {
    scalar_mul_point(secret_key, BLS12_381::one())
}

fn derive_key_image(secret_key_bytes: [u8; 32], block_params: [u8; 32]) -> BLS12_381 {
    let combined_bytes = combine_bytes(secret_key_bytes, block_params);
    let hash = blake2s(combined_bytes);
    let hash_be = le_to_be(hash);

    let hash_scalar = bytes_to_scalar(hash_be);
    scalar_mul_point(hash_scalar, BLS12_381::one())
}

fn main(
    secret_key_bytes: [u8; 32], // secret key in BE bytes
    block_params: [u8; 32], // block params in BE bytes
) -> pub (BLS12_381, BLS12_381) {
    let secret_key = bytes_to_scalar(secret_key_bytes);
    let public_key = derive_public_key(secret_key);
    let key_image = derive_key_image(secret_key_bytes, block_params);

    (public_key, key_image)
}

#[test]
fn test_main() {
    // Test Input Values
    let secret_key_bytes = [
        0x2f, 0xba, 0xa8, 0x68, 0x13, 0x9e, 0x0d, 0x5b, 0xcc, 0xc5, 0xe1, 0xa9, 0x21, 0x48, 0x82,
        0x7c, 0x24, 0x63, 0x7e, 0x71, 0x18, 0x20, 0xbd, 0xb3, 0x17, 0x23, 0x82, 0x5c, 0x25, 0x90,
        0xfd, 0x9a,
    ];
    let block_params = [
        0x63, 0x99, 0xf4, 0x3c, 0x84, 0x5e, 0xbb, 0xb4, 0x28, 0x6c, 0x64, 0xfe, 0x3a, 0xf1, 0x17,
        0x68, 0x74, 0x7f, 0xa6, 0xea, 0x43, 0xf9, 0xf2, 0xaf, 0x93, 0x4b, 0xa5, 0xbd, 0xa3, 0xc1,
        0x3e, 0x35,
    ];

    // Expected Results
    // Public Key
    let expected_public_key_x_bytes = [
        0x3b, 0x20, 0xb4, 0xb5, 0x57, 0xaa, 0x9f, 0x81, 0x48, 0x54, 0x61, 0x10, 0xef, 0x42, 0x60,
        0x88, 0x50, 0x6f, 0x58, 0x90, 0x2b, 0xe5, 0x3f, 0xa5, 0x6b, 0x52, 0x66, 0x09, 0xbb, 0x19,
        0x8b, 0x0c, 0x1c, 0xfa, 0x3b, 0x6e, 0x32, 0x7d, 0x12, 0x4e, 0xaf, 0xfb, 0x92, 0x6c, 0xa6,
        0x59, 0x6c, 0x0f,
    ];
    let expected_public_key_y_bytes = [
        0x6c, 0xd9, 0x9e, 0x68, 0x6f, 0x5e, 0x35, 0x33, 0x71, 0x05, 0x10, 0x13, 0x2c, 0xd8, 0xd7,
        0x18, 0x23, 0xc4, 0x73, 0x69, 0xa9, 0x55, 0x5d, 0xed, 0x81, 0xa0, 0xc0, 0x4d, 0x6e, 0xf0,
        0xd5, 0x62, 0x7b, 0x83, 0x21, 0x04, 0xd8, 0x27, 0x76, 0xec, 0xce, 0x80, 0xbd, 0x38, 0xe2,
        0xa2, 0x83, 0x10,
    ];
    // Key Image
    let expected_key_image_x_bytes = [
        0x1a, 0x82, 0x29, 0xd9, 0x4d, 0x6c, 0xdf, 0xb2, 0xcc, 0x22, 0xe7, 0x68, 0x31, 0xbe, 0xd4,
        0x84, 0x4a, 0x93, 0xec, 0x1f, 0x98, 0x70, 0x69, 0x09, 0xde, 0xea, 0xb5, 0xa3, 0x4f, 0x74,
        0xb4, 0xcc, 0x54, 0x43, 0xc1, 0x49, 0xc4, 0xbb, 0x53, 0x5f, 0xf9, 0x5d, 0x51, 0x3d, 0x18,
        0x5d, 0x40, 0x09,
    ];
    let expected_key_image_y_bytes = [
        0xde, 0x2d, 0x9e, 0xf2, 0x72, 0xa6, 0xbd, 0x21, 0xdb, 0xc3, 0x96, 0x51, 0x64, 0xce, 0xe4,
        0x92, 0x6d, 0xb9, 0x26, 0xcf, 0x80, 0xa7, 0xd7, 0x85, 0xf0, 0x39, 0xdb, 0x22, 0x11, 0x22,
        0x31, 0xd4, 0x6f, 0x31, 0x87, 0xce, 0x58, 0xe3, 0x23, 0x17, 0xa1, 0x36, 0xd0, 0xbf, 0x92,
        0xec, 0xfd, 0x0b,
    ];

    let (public_key, key_image) = main(secret_key_bytes, block_params);

    let public_key_x_bytes = public_key.x.to_le_bytes();
    let public_key_y_bytes = public_key.y.to_le_bytes();
    let key_image_x_bytes = key_image.x.to_le_bytes();
    let key_image_y_bytes = key_image.y.to_le_bytes();

    assert_eq(public_key_x_bytes, expected_public_key_x_bytes);
    assert_eq(public_key_y_bytes, expected_public_key_y_bytes);
    assert_eq(key_image_x_bytes, expected_key_image_x_bytes);
    assert_eq(key_image_y_bytes, expected_key_image_y_bytes);
}
