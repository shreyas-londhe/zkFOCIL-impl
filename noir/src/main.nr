mod bytes;
mod crypto;
mod merkle;

use crate::crypto::{bytes_to_scalar, derive_key_image, derive_public_key, hash_public_key};
use dep::noir_bigcurve::curves::bls12_381::{BLS12_381, BLS12_381Scalar};
use bignum::BigNum;
use merkle::verify_merkle_proof;

pub global VALIDATOR_TREE_DEPTH: u32 = 20;

/// Main ZK circuit entry point.
/// Derives the public key and key image from a secret key and block parameters.
///
/// # Arguments
///
/// * `secret_key_bytes` - The secret key as a 32-byte big-endian array.
/// * `block_params` - The block parameters as a 32-byte big-endian array.
/// * `validator_root` - The root of the validator tree in LE bytes.
/// * `validator_merkle_path` - The path to the validator in the tree in LE bytes.
/// * `validator_merkle_indices` - The indices of the validator in the tree.
///
/// # Returns
///
/// A tuple containing the public key and the key image, both as BLS12_381 curve points.
fn main(
    secret_key_bytes: [u8; 32], // secret key in BE bytes
    block_params: [u8; 32], // block params in BE bytes
    validator_root: [u8; 32], // validator root in LE bytes
    validator_merkle_path: [[u8; 32]; VALIDATOR_TREE_DEPTH], // validator merkle path in LE bytes
    validator_merkle_indices: [bool; VALIDATOR_TREE_DEPTH], // validator merkle indices
) -> pub ([u8; 32], BLS12_381) {
    // Convert secret key bytes to scalar representation
    // TODO: Make sure sk_bytes are not modded while converting to a scalar.
    let secret_key: BLS12_381Scalar = bytes_to_scalar(secret_key_bytes);
    // Derive the public key: PK = sk * G
    let public_key: BLS12_381 = derive_public_key(secret_key);
    // Derive the key image: KI = H(sk_bytes || block_params) * G
    let key_image = derive_key_image(secret_key_bytes, block_params);
    // Verify if the validator is valid
    let public_key_hash = hash_public_key(public_key);
    assert(
        verify_merkle_proof::<VALIDATOR_TREE_DEPTH>(
            validator_root,
            public_key_hash,
            validator_merkle_path,
            validator_merkle_indices,
        )
            == true,
        "Validator is not valid",
    );

    (validator_root, key_image)
}

#[test]
fn test_main() {
    // Test Input Values
    // Tree Depth used for this test: 20
    let secret_key_bytes = [
        0x11, 0xfe, 0xe1, 0xd6, 0x36, 0x99, 0x18, 0x01, 0xde, 0x5a, 0x0b, 0x99, 0xe1, 0xd9, 0x2b,
        0x66, 0xa1, 0x68, 0x2e, 0x25, 0x9f, 0xf9, 0x15, 0xd3, 0x15, 0xa5, 0x79, 0xb1, 0xcc, 0x57,
        0x74, 0xaa,
    ];
    let block_params = [
        0x13, 0xac, 0xc8, 0xac, 0x04, 0xb5, 0xc1, 0xe7, 0x4e, 0x2f, 0x07, 0xa0, 0x22, 0xcf, 0x80,
        0xc1, 0x25, 0x0d, 0xed, 0x76, 0x4d, 0xd9, 0x2b, 0xfa, 0xb5, 0x8f, 0x64, 0x4c, 0x8a, 0xe6,
        0x4d, 0x81,
    ];
    let validator_root = [
        0x71, 0x89, 0x6d, 0x30, 0xa6, 0x9a, 0x64, 0x86, 0xa3, 0xae, 0x34, 0xa5, 0x92, 0xe2, 0xfb,
        0x87, 0xa2, 0x1a, 0xbe, 0x4d, 0x9e, 0xad, 0x35, 0x6b, 0x26, 0xdc, 0x48, 0x0f, 0xb1, 0x8e,
        0x3c, 0xb6,
    ]; // LE hash
    let validator_merkle_path: [[u8; 32]; 20] = [
        [
            0x18, 0x4d, 0x11, 0xa2, 0x24, 0x22, 0xf2, 0x73, 0x3d, 0x17, 0x1c, 0xbe, 0x02, 0x8b,
            0xa5, 0x20, 0x28, 0x2f, 0x0e, 0x53, 0xc5, 0xe1, 0x9a, 0xb0, 0x91, 0xda, 0xe9, 0xed,
            0xc7, 0x74, 0x97, 0x4e,
        ],
        [
            0x12, 0x61, 0x8d, 0x0e, 0x8a, 0x07, 0xb2, 0x85, 0xb5, 0x94, 0xbc, 0xc5, 0xca, 0xee,
            0xc0, 0xf0, 0x2a, 0x23, 0xdc, 0x81, 0x6e, 0xe4, 0x77, 0xdb, 0xac, 0xb2, 0x0c, 0x4b,
            0xf6, 0x8b, 0x0b, 0x0b,
        ],
        [
            0x9a, 0x94, 0x75, 0x65, 0x7a, 0x8f, 0xa9, 0xcf, 0x1e, 0xe5, 0xfb, 0x7a, 0xc1, 0x3f,
            0xa6, 0x38, 0x74, 0x67, 0x79, 0x65, 0x1b, 0x36, 0x39, 0x98, 0xf1, 0x19, 0xed, 0xb0,
            0xbd, 0xc3, 0x99, 0x78,
        ],
        [
            0x4a, 0xb4, 0x9b, 0x74, 0x03, 0x4b, 0x9b, 0xa9, 0xed, 0xc0, 0x47, 0xfc, 0x51, 0x7b,
            0x9c, 0xf0, 0xc5, 0xcf, 0x7b, 0x4f, 0x4e, 0x8a, 0xfe, 0xb1, 0x6d, 0x9a, 0xe4, 0x55,
            0x49, 0x9d, 0xbc, 0x27,
        ],
        [
            0xf5, 0x64, 0x87, 0x49, 0x0a, 0xf2, 0x7f, 0x31, 0xfa, 0xa0, 0x89, 0x80, 0xdf, 0x7e,
            0x01, 0xe0, 0x5f, 0x0e, 0x8f, 0x18, 0x46, 0xb8, 0xd6, 0x57, 0x6c, 0x52, 0xe4, 0x12,
            0x05, 0x16, 0xee, 0x36,
        ],
        [
            0xc3, 0x8e, 0xef, 0x99, 0xc1, 0x45, 0xc1, 0xba, 0xba, 0xd3, 0x95, 0x57, 0x76, 0xbb,
            0x63, 0x8a, 0xdf, 0x2a, 0xc2, 0x51, 0xda, 0xd6, 0xc1, 0x56, 0xd4, 0xdc, 0xb9, 0x1b,
            0x32, 0x1b, 0x5c, 0x69,
        ],
        [
            0x2f, 0x07, 0x0c, 0xed, 0x8d, 0x68, 0x66, 0x66, 0xdb, 0xbd, 0xd3, 0x64, 0xf1, 0x96,
            0x46, 0x6b, 0x1b, 0xdc, 0xce, 0x2a, 0x18, 0xb4, 0x88, 0x65, 0x7f, 0x99, 0x6c, 0x38,
            0xba, 0x48, 0x1e, 0x65,
        ],
        [
            0xf1, 0x74, 0x28, 0x99, 0x6f, 0xb5, 0xee, 0xdb, 0x41, 0xda, 0x14, 0xda, 0x6e, 0xae,
            0xc0, 0x91, 0x01, 0x3e, 0xec, 0x4b, 0x80, 0x81, 0xce, 0x53, 0xd1, 0x28, 0x1b, 0x66,
            0xec, 0x12, 0x43, 0xd0,
        ],
        [
            0x76, 0xb0, 0x9b, 0xda, 0x85, 0x98, 0x07, 0x46, 0x06, 0xff, 0xa8, 0x17, 0x61, 0x33,
            0xfe, 0x8c, 0x23, 0xa0, 0xc0, 0xa1, 0x8c, 0xa5, 0x15, 0xc4, 0x56, 0x68, 0x8b, 0xe8,
            0xd2, 0xc5, 0x75, 0x95,
        ],
        [
            0x4e, 0xe9, 0x37, 0xc8, 0x7e, 0x2f, 0xa0, 0x4e, 0x13, 0xc3, 0x41, 0xa4, 0x53, 0x78,
            0x5c, 0xc1, 0xfc, 0xa8, 0xa8, 0x97, 0x3d, 0xc1, 0x1a, 0xf5, 0xd3, 0xca, 0x9b, 0xfc,
            0xed, 0xd1, 0x7d, 0x5a,
        ],
        [
            0x1b, 0x03, 0x8c, 0xf7, 0x99, 0x42, 0x08, 0x7b, 0x40, 0x40, 0xfc, 0x45, 0x3d, 0x75,
            0xf9, 0xb1, 0x92, 0xdf, 0x8b, 0x85, 0xc4, 0x04, 0xbd, 0x85, 0x84, 0x0f, 0x2a, 0x29,
            0xf6, 0xb3, 0xa6, 0x61,
        ],
        [
            0x3a, 0xcd, 0x09, 0x17, 0x16, 0x3c, 0xc5, 0x35, 0xe6, 0xd1, 0xda, 0x70, 0xae, 0xdb,
            0x67, 0xbc, 0x95, 0x4c, 0x1c, 0x76, 0x61, 0xb6, 0xe6, 0xb4, 0xa7, 0x0f, 0x2c, 0x9b,
            0xa1, 0x7f, 0x60, 0x29,
        ],
        [
            0xda, 0x1e, 0x69, 0x87, 0xe4, 0xad, 0xa4, 0x3a, 0xb7, 0x6b, 0x72, 0x08, 0x37, 0x1c,
            0x7e, 0x1a, 0x27, 0x32, 0x68, 0x2d, 0x8d, 0x41, 0xe1, 0x0f, 0xd6, 0x84, 0x89, 0xb4,
            0x89, 0x06, 0x6e, 0x37,
        ],
        [
            0x72, 0x0b, 0xdd, 0x39, 0xc5, 0x52, 0x73, 0xd0, 0xf2, 0x26, 0x31, 0x62, 0x8d, 0x3f,
            0xf8, 0xff, 0xc6, 0x8b, 0xed, 0xae, 0xd1, 0x03, 0xc0, 0xb1, 0xaa, 0x1e, 0x42, 0x1f,
            0x73, 0x53, 0x47, 0xe6,
        ],
        [
            0x79, 0x9d, 0xe3, 0x8e, 0xac, 0x32, 0x47, 0x10, 0x62, 0xf3, 0x64, 0xfd, 0xe0, 0x1e,
            0xb8, 0x0b, 0x66, 0x38, 0x9f, 0xa2, 0x16, 0x97, 0xbf, 0x99, 0x17, 0x43, 0x4d, 0x99,
            0x2c, 0x60, 0x76, 0x31,
        ],
        [
            0x66, 0x6d, 0xc8, 0x1f, 0x8f, 0xa7, 0xe9, 0xd6, 0xe0, 0xe3, 0xed, 0x6c, 0x63, 0x6d,
            0x1f, 0xae, 0xa4, 0x9c, 0x5d, 0x8d, 0xde, 0x1a, 0x17, 0xf6, 0x71, 0xf1, 0xd7, 0xe0,
            0x16, 0xe8, 0x44, 0xa6,
        ],
        [
            0x94, 0x4f, 0x3a, 0xaf, 0xe4, 0xc7, 0xd2, 0xfd, 0x03, 0x59, 0x95, 0x51, 0x5f, 0x9f,
            0xee, 0x60, 0xee, 0xc3, 0xd4, 0x39, 0x02, 0x4c, 0xf7, 0x6e, 0xe2, 0x07, 0xef, 0x46,
            0x60, 0x0c, 0x97, 0x22,
        ],
        [
            0xd9, 0xf5, 0xba, 0xd4, 0x19, 0x00, 0xa7, 0x20, 0x77, 0xe5, 0x3b, 0x4b, 0xd5, 0x0d,
            0xc0, 0xaa, 0x64, 0xf4, 0xe3, 0xa4, 0x9b, 0x01, 0x52, 0x98, 0x1b, 0xd1, 0xa2, 0x9b,
            0x96, 0xb2, 0x51, 0xbc,
        ],
        [
            0x07, 0x90, 0x21, 0xb7, 0xf8, 0x03, 0x83, 0xad, 0xf7, 0x68, 0xa9, 0x2c, 0x97, 0xc3,
            0x84, 0x72, 0x51, 0x2b, 0x1d, 0x7f, 0x13, 0xe3, 0x9e, 0x69, 0x48, 0xc0, 0x36, 0xb7,
            0xa4, 0x9a, 0xee, 0xeb,
        ],
        [
            0xe1, 0x85, 0xf2, 0xb4, 0x63, 0x42, 0x05, 0x27, 0xdf, 0x34, 0xc8, 0x0f, 0x44, 0xb0,
            0x96, 0x4d, 0xb6, 0xcf, 0xe2, 0xdb, 0x1f, 0xa4, 0xe7, 0x78, 0xdc, 0xeb, 0x1f, 0xe4,
            0x68, 0x25, 0x6f, 0x8d,
        ],
    ]; // Array of LE hashes
    let validator_merkle_indices = [
        true, false, true, false, false, true, true, true, true, true, false, false, false, false,
        false, false, false, false, true, false,
    ];

    // Expected Results (Coords LE)
    let expected_key_image_x_bytes = [
        0xbb, 0xf6, 0x46, 0xdd, 0x9c, 0x9e, 0x68, 0x55, 0xa0, 0xe6, 0x19, 0xef, 0x43, 0xf2, 0x28,
        0xeb, 0xf2, 0x90, 0x33, 0x11, 0xff, 0xd8, 0x20, 0x96, 0xf5, 0x04, 0x35, 0xc7, 0x98, 0x4e,
        0x12, 0xeb, 0xef, 0xf3, 0x97, 0xe8, 0x37, 0x9c, 0x7b, 0xba, 0x6c, 0xd1, 0x2c, 0xdd, 0xef,
        0x76, 0xac, 0x08,
    ];
    let expected_key_image_y_bytes = [
        0xe9, 0xf1, 0x15, 0x59, 0x7c, 0x88, 0xc6, 0x9c, 0x5f, 0xa6, 0xad, 0x09, 0xf9, 0x39, 0xdc,
        0xa0, 0xbb, 0x8a, 0x53, 0x9f, 0x90, 0xf3, 0x03, 0x85, 0xf0, 0x12, 0xb2, 0x96, 0xab, 0xa8,
        0x43, 0x42, 0x89, 0x28, 0x19, 0x0a, 0x90, 0x01, 0xa8, 0x3a, 0xa4, 0x3c, 0xb1, 0x25, 0x40,
        0xf2, 0x2a, 0x18,
    ];

    // Call the main function with test inputs
    let (validator_root_output, key_image) = main(
        secret_key_bytes,
        block_params,
        validator_root,
        validator_merkle_path,
        validator_merkle_indices,
    );

    // Extract coordinates as little-endian bytes for comparison
    let key_image_x_bytes = key_image.x.to_le_bytes();
    let key_image_y_bytes = key_image.y.to_le_bytes();

    // Assert that the results match the expected values
    assert(validator_root_output == validator_root);
    assert_eq(key_image_x_bytes, expected_key_image_x_bytes);
    assert_eq(key_image_y_bytes, expected_key_image_y_bytes);
}
